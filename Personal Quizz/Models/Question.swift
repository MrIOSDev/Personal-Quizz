
struct Question {
    let title: String
    let answers: [Answer]
    let type: ResponseType
    
    static func getQuestions() -> [Question] {
        [
        Question(
            title: "–ö–∞–∫—É—é –ø–∏—â—é –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
            answers: [
                Answer(title: "–°—Ç–µ–π–∫",type: .dog),
                Answer(title: "–†—ã–±—É", type: .cat),
                Answer(title: "–ü–æ–º–æ–∏", type: .rat),
                Answer(title: "–ú–∞—Ç—á—É –Ω–∞ –æ—Å–ª–∏–Ω–æ–π –º–æ—á–µ", type: .frog)
            ],
            type: .single
        ),
        
        Question(
            title: "–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?",
            answers: [
                Answer(title: "–ü–ª–∞–≤–∞—Ç—å", type: .dog),
                Answer(title: "–°–ø–∞—Ç—å", type: .cat),
                Answer(title: "–ë—ã—Ç—å —Å—Ç–µ—Ä–≤–æ–π", type: .rat),
                Answer(title: "–ü—Ä–æ–≥–ª–∞—Ç—ã–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–Ω–∏–∂–µ–Ω–∏—è ", type: .frog)
            ],
            type: .multiple
        ),
        
        Question(
            title: "–õ—é–±–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –º–∞—à–∏–Ω–µ?",
            answers: [
                Answer(title: "–î–∞", type: .dog),
                Answer(title: "–ù–µ—Ç", type: .cat),
                Answer(title: "–õ—é–±–ª—é, –∫–æ–≥–¥–∞ –ø–æ –ø–æ–ª—É –∑–∞ –≤–æ–ª–æ—Å—ã –º–µ–Ω—è —Ç–∞—Å–∫–∞—é—Ç", type: .rat),
                Answer(title: "–¢—Ä—É—Å—Ç—Ö–∞", type: .frog)
            ],
            type: .range)
        ]
    }
}

enum ResponseType {
    case single
    case multiple
    case range
}

struct Answer {
    let title: String
    let type: AnimalType
}

enum AnimalType: Character {
    case dog = "üê∂"
    case cat = "üê±"
    case rat = "üêÄ"
    case frog = "üê∏"
    
    var definition: String {
        switch self {
        case .dog:
            return("–í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –æ–∫—Ä—É–∂–∞—Ç—å —Å–µ–±—è –ª—é–¥—å–º–∏")
        case .cat:
            return("–í—ã —É —Å–µ–±—è –Ω–∞ —É–º–µ")
        case .rat:
            return("–í—ã –ù–∞–∑–µ–Ω–∞, –≤—ã –∑–Ω–∞–µ—Ç–µ –æ –≤—Å–µ—Ö —Å–ø–ª–µ—Ç–Ω—è—Ö –º–∏—Ä–∞ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è. –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–≥—Ä–∞—Ç—å –ø–æ–¥—Ä—É–≥—É, —á—Ç–æ–± –ª—é–¥–∏ —Å –≤–∞–º–∏ –¥–µ–ª–∏–ª–∏—Å—å —Å–ø–ª–ª–µ—Ç–Ω—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –≤—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç–µ –º–µ–∂–¥—É –ª—é–¥—å–º–∏.")
        case .frog:
            return("–í—ã –¢–∏–º–∞, —Ä–∞–Ω—å—à–µ –≤–∞—Å –µ—â–µ –Ω–∞–∑—ã–≤–∞–ª–∏ –¢–ò–ú–ê –£–ß–ò–•–ê, –≤—ã –ª—é–±–∏—Ç–µ –±—ã—Ç—å –º–µ—Ä–∑–∫–æ–π, –≤–∞—Å —á–∞—Å—Ç–æ –±—å—é—Ç —Ç–∞–ø–∫–∞–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã –∑–∞ –≤–∞—à—É –º–µ—Ä–∑–æ—Å—Ç—å.")
        }
    }
    
  
}

